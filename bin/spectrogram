#!/usr/bin/env python
# Based on
# https://github.com/gaborfodor/MLSP_2013/blob/master/1_pattern_extraction.py
import numpy as np
import scipy as sp
from scipy import fft
import matplotlib.pyplot as plt
from skimage.morphology import disk, remove_small_objects
from skimage.filters import rank
from skimage.util import img_as_ubyte
import wave


def pic_to_ubyte (pic):
    a = (pic - np.min(pic)) / np.max(pic - np.min(pic))
    a = img_as_ubyte(a)
    return a


def wav_to_floats(filename):
    s = wave.open(filename, 'r')
    strsig = s.readframes(s.getnframes())
    y = np.fromstring(strsig, np.short)
    s.close()
    return y


def spectrogram(wav_file):
    N = 160000
    K = 512
    step = 4
    wind = 0.5 * (1 - np.cos(np.array(range(K)) * 2 * np.pi / (K - 1)))

    wav = wav_to_floats(wav_file)
    spectrogram = []
    for j in range(step * N//K - step):
        vec = wav[j * K//step : (j + step) * K//step] * wind
        spectrogram.append(abs(fft(vec, K)[:K//2]))

    return np.array(spectrogram)


def create_spectrogram_images(spectrogram, outfile):
    MIN_SEGMENT_SIZE = 99
    p = 90

    fig = plt.figure(figsize=(20, 10))

    mypic = np.transpose(spectrogram)
    mypic_rev = np.zeros_like(mypic)
    for i in range(mypic.shape[0]):
        mypic_rev[i] = mypic[-i - 1]

    mypic_rev_small = mypic_rev[:200,:]
    mypic_rev = mypic_rev_small
    mypic_rev_log = np.log10(mypic_rev+ 0.001)
    mypic_rev_gauss =sp.ndimage.gaussian_filter(mypic_rev, sigma=3)
    mypic_rev_log_gauss = sp.ndimage.gaussian_filter(mypic_rev_log, sigma=3)
    mypic_rev_gauss_bin = mypic_rev_gauss > np.percentile(mypic_rev_gauss,p)
    mypic_rev_log_gauss_bin = mypic_rev_log_gauss > np.percentile(mypic_rev_log_gauss,p)
    mypic_rev_gauss_bin_close =sp.ndimage.binary_closing( sp.ndimage.binary_opening(mypic_rev_gauss_bin))
    mypic_rev_log_gauss_bin_close =sp.ndimage.binary_closing( sp.ndimage.binary_opening(mypic_rev_log_gauss_bin))
    mypic_rev_gauss_grad = rank.gradient(pic_to_ubyte(mypic_rev_gauss), disk(3))
    mypic_rev_log_gauss_grad = rank.gradient(pic_to_ubyte(mypic_rev_log_gauss), disk(3))
    mypic_rev_gauss_grad_bin = mypic_rev_gauss_grad > np.percentile(mypic_rev_gauss_grad,p)
    mypic_rev_log_gauss_grad_bin = mypic_rev_log_gauss_grad > np.percentile(mypic_rev_log_gauss_grad,p )
    mypic_rev_gauss_grad_bin_close =sp.ndimage.binary_closing( sp.ndimage.binary_opening(mypic_rev_gauss_grad_bin))
    mypic_rev_log_gauss_grad_bin_close =sp.ndimage.binary_closing( sp.ndimage.binary_opening(mypic_rev_log_gauss_grad_bin))
    bfh = sp.ndimage.binary_fill_holes(mypic_rev_gauss_grad_bin_close)
    bfh_rm = remove_small_objects(bfh, MIN_SEGMENT_SIZE)
    log_bfh = sp.ndimage.binary_fill_holes(mypic_rev_log_gauss_grad_bin_close)
    log_bfh_rm = remove_small_objects(log_bfh, MIN_SEGMENT_SIZE)

    plt.subplot(6,2,1)
    plt.imshow(mypic_rev,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('Spectrogram')
    plt.subplot(6,2,2)
    plt.imshow(mypic_rev_log,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('Spectrogram (log)')
    plt.subplot(6,2,3)
    plt.imshow(mypic_rev_log_gauss,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('+ Gaussian Filtering')
    plt.subplot(6,2,4)
    plt.imshow(mypic_rev_log,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('+ Gaussian Filtering (log)')
    plt.subplot(6,2,5)
    plt.imshow(mypic_rev_gauss_grad,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('+ Gradient')
    plt.subplot(6,2,6)
    plt.imshow(mypic_rev_log_gauss_grad,cmap=plt.cm.afmhot_r)
    plt.axis('off')
    plt.title('+ Gradient (log)')
    plt.subplot(6,2,7)
    plt.imshow(mypic_rev_gauss_grad_bin,cmap=plt.cm.gray)
    plt.axis('off')
    plt.title('+ >90%')
    plt.subplot(6,2,8)
    plt.imshow(mypic_rev_log_gauss_grad_bin,cmap=plt.cm.gray)
    plt.axis('off')
    plt.title('+ >90% (log)')
    plt.subplot(6,2,9)
    plt.imshow(mypic_rev_gauss_grad_bin_close,cmap=plt.cm.gray)
    plt.axis('off')
    plt.title('+ binary_closing + binary_opening')
    plt.subplot(6,2,10)
    plt.imshow(mypic_rev_log_gauss_grad_bin_close,cmap=plt.cm.gray)
    plt.axis('off')
    plt.title('+ binary_closing + binary_opening (log)')

    # SEGMENTS
    labeled_segments, num_seg = sp.ndimage.label(bfh_rm)
    plt.subplot(6,2,11)
    plt.imshow(labeled_segments)
    plt.axis('off')
    plt.title('+ binary_fill_holes + remove_small_objects')
    for current_segment_id in range(1,num_seg+1):
        current_segment = (labeled_segments == current_segment_id)*1
        xr = current_segment.max(axis =  0)
        yr = current_segment.max(axis =  1)
        xr_max = np.max(xr*np.arange(len(xr)))
        xr[xr==0] = xr.shape[0]
        xr_min = np.argmin(xr)
        yr_max = np.max(yr*np.arange(len(yr)))
        yr[yr==0] = yr.shape[0]
        yr_min = np.argmin(yr)
        segment_frame = [yr_min, yr_max, xr_min, xr_max]
        subpic = mypic_rev_gauss[yr_min:yr_max+1,xr_min:xr_max+1]

    # LOG SEGMENTS
    labeled_segments, num_seg = sp.ndimage.label(log_bfh_rm)
    plt.subplot(6,2,12)
    plt.imshow(labeled_segments)
    plt.axis('off')
    plt.title('+ binary_fill_holes + remove_small_objects (log)')

    for current_segment_id in range(1,num_seg+1):
        current_segment = (labeled_segments == current_segment_id)*1
        xr = current_segment.max(axis =  0)
        yr = current_segment.max(axis =  1)
        xr_max = np.max(xr*np.arange(len(xr)))
        xr[xr==0] = xr.shape[0]
        xr_min = np.argmin(xr)
        yr_max = np.max(yr*np.arange(len(yr)))
        yr[yr==0] = yr.shape[0]
        yr_min = np.argmin(yr)
        segment_frame = [yr_min, yr_max, xr_min, xr_max]
        subpic = mypic_rev_log_gauss[yr_min:yr_max+1,xr_min:xr_max+1]

    fig.savefig(outfile.encode('utf-8'), dpi = 300)


if __name__ == '__main__':
    import sys
    infile, outfile = sys.argv[1:]
    infile, outfile
    create_spectrogram_images(spectrogram(infile), outfile)
